# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: tests

on:
  push:
    branches:
      - master
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5

        with:
          python-version: "3.10"
      - name: Install tox
        run: |
          pip install tox

      - name: Run pre-commit to check linting and typing
        run: tox -e linting

  test:
    needs: [linting]
    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # these libraries enable testing on Qt on linux
      - uses: tlambert03/setup-qt-libs@v1

      # strategy borrowed from vispy for installing opengl libs on windows
      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      # note: if you need dependencies from conda, considering using
      # setup-miniconda: https://github.com/conda-incubator/setup-miniconda
      # and
      # tox-conda: https://github.com/tox-dev/tox-conda
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools tox tox-gh-actions
          python -m pip install .[testing]

      # this runs the platform-specific tests declared in tox.ini
      - name: Test without numba
        run: |
          python -m tox
        env:
          PLATFORM: ${{ matrix.platform }}

      - name: Install numba
        run: |
          pip install .[fast]

      - name: Test with numba
        run: |
          python -m tox
        env:
          PLATFORM: ${{ matrix.platform }}

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: cov-reports-${{ matrix.platform }}-py-${{ matrix.python-version }}
          path: |
            ./.coverage.*


  coverage_prepare:
    name: Prepare coverage
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache-dependency-path: pyproject.toml
          cache: 'pip'
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install codecov

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: cov-reports-*
          path: coverage
          merge-multiple: true
      - name: Uproad coverage input
        uses: actions/upload-artifact@v4
        with:
          name: coverage_part
          path: coverage
          retention-days: 5

      - name: combine coverage data
        run: |
          python -Im coverage combine --debug=pathmap,config coverage
          python -Im coverage xml -o coverage.xml
          # Report and write to summary.
          python -Im coverage report --format=markdown --skip-empty --skip-covered >> $GITHUB_STEP_SUMMARY
          coverage report -m --fail-under 80

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage_xml
          path: coverage.xml
          retention-days: 5

      - name: Upload coverage data
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}


  deploy:
    # this will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    needs: [test]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine build
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag
          python -m build --sdist --wheel
          twine upload dist/*
